=== tests/cases/compiler/capturedLetConstInLoop9_ES6.ts ===

for (let x = 0; x < 1; ++x) {
>x : Symbol(x, Decl(capturedLetConstInLoop9_ES6.ts, 1, 8))
>x : Symbol(x, Decl(capturedLetConstInLoop9_ES6.ts, 1, 8))
>x : Symbol(x, Decl(capturedLetConstInLoop9_ES6.ts, 1, 8))

    let x;
>x : Symbol(x, Decl(capturedLetConstInLoop9_ES6.ts, 2, 7))

    (function() { return x });
>x : Symbol(x, Decl(capturedLetConstInLoop9_ES6.ts, 2, 7))
    {
        let x;
>x : Symbol(x, Decl(capturedLetConstInLoop9_ES6.ts, 5, 11))

        (function() { return x });
>x : Symbol(x, Decl(capturedLetConstInLoop9_ES6.ts, 5, 11))
    }

    try { }
    catch (e) {
>e : Symbol(e, Decl(capturedLetConstInLoop9_ES6.ts, 10, 11))

        let x;
>x : Symbol(x, Decl(capturedLetConstInLoop9_ES6.ts, 11, 11))

        (function() { return x });
>x : Symbol(x, Decl(capturedLetConstInLoop9_ES6.ts, 11, 11))
    }

    switch (x) {
>x : Symbol(x, Decl(capturedLetConstInLoop9_ES6.ts, 2, 7))

        case 1:
            let x;
>x : Symbol(x, Decl(capturedLetConstInLoop9_ES6.ts, 17, 15))

            (function() { return x });
>x : Symbol(x, Decl(capturedLetConstInLoop9_ES6.ts, 17, 15))

           break;
    }
    
    while (1 == 1) {
        let x;
>x : Symbol(x, Decl(capturedLetConstInLoop9_ES6.ts, 23, 11))

        (function() { return x });
>x : Symbol(x, Decl(capturedLetConstInLoop9_ES6.ts, 23, 11))
    }
    
    class A {
>A : Symbol(A, Decl(capturedLetConstInLoop9_ES6.ts, 25, 5))

        m() {
>m : Symbol(m, Decl(capturedLetConstInLoop9_ES6.ts, 27, 13))

            return x + 1;
>x : Symbol(x, Decl(capturedLetConstInLoop9_ES6.ts, 2, 7))
        }
    }
}

declare function use(a: any);
>use : Symbol(use, Decl(capturedLetConstInLoop9_ES6.ts, 32, 1))
>a : Symbol(a, Decl(capturedLetConstInLoop9_ES6.ts, 34, 21))

function foo() {
>foo : Symbol(foo, Decl(capturedLetConstInLoop9_ES6.ts, 34, 29))

    l0:
    for (let a of []) {
>a : Symbol(a, Decl(capturedLetConstInLoop9_ES6.ts, 38, 12))
        
        if (a === 1) {
>a : Symbol(a, Decl(capturedLetConstInLoop9_ES6.ts, 38, 12))

            break;
        }
        
        if (a === 2) {
>a : Symbol(a, Decl(capturedLetConstInLoop9_ES6.ts, 38, 12))

            break l0;
        }
        
        for (let b of []) {
>b : Symbol(b, Decl(capturedLetConstInLoop9_ES6.ts, 48, 16))

            var [{x, y:z}] = [{x:1, y:2}];
>x : Symbol(x, Decl(capturedLetConstInLoop9_ES6.ts, 49, 18))
>y : Symbol(y, Decl(capturedLetConstInLoop9_ES6.ts, 49, 35))
>z : Symbol(z, Decl(capturedLetConstInLoop9_ES6.ts, 49, 20))
>x : Symbol(x, Decl(capturedLetConstInLoop9_ES6.ts, 49, 31))
>y : Symbol(y, Decl(capturedLetConstInLoop9_ES6.ts, 49, 35))

            if (b === 1) {
>b : Symbol(b, Decl(capturedLetConstInLoop9_ES6.ts, 48, 16))

                break;
            }
            
            
            if (b === 2) {
>b : Symbol(b, Decl(capturedLetConstInLoop9_ES6.ts, 48, 16))

                break l0;
            }
            
            l1:
            if (b === 3) {
>b : Symbol(b, Decl(capturedLetConstInLoop9_ES6.ts, 48, 16))

                break l1;
            }
            
            return 50;
        }

        for (let b of []) {
>b : Symbol(b, Decl(capturedLetConstInLoop9_ES6.ts, 67, 16))

            var [{x1, y:z1}] = [{x1:1, y:arguments.length}];
>x1 : Symbol(x1, Decl(capturedLetConstInLoop9_ES6.ts, 68, 18))
>y : Symbol(y, Decl(capturedLetConstInLoop9_ES6.ts, 68, 38))
>z1 : Symbol(z1, Decl(capturedLetConstInLoop9_ES6.ts, 68, 21))
>x1 : Symbol(x1, Decl(capturedLetConstInLoop9_ES6.ts, 68, 33))
>y : Symbol(y, Decl(capturedLetConstInLoop9_ES6.ts, 68, 38))
>arguments.length : Symbol(IArguments.length, Decl(lib.d.ts, --, --))
>arguments : Symbol(arguments)
>length : Symbol(IArguments.length, Decl(lib.d.ts, --, --))

            if (b === 1) {
>b : Symbol(b, Decl(capturedLetConstInLoop9_ES6.ts, 67, 16))

                break;
            }
            
            if (b === 2) {
>b : Symbol(b, Decl(capturedLetConstInLoop9_ES6.ts, 67, 16))

                break l0;
            }
            
            return 100;
            
            () => b
>b : Symbol(b, Decl(capturedLetConstInLoop9_ES6.ts, 67, 16))
        }

        
        () => a;
>a : Symbol(a, Decl(capturedLetConstInLoop9_ES6.ts, 38, 12))
    }
    
    use(x);
>use : Symbol(use, Decl(capturedLetConstInLoop9_ES6.ts, 32, 1))
>x : Symbol(x, Decl(capturedLetConstInLoop9_ES6.ts, 49, 18))

    use(z);
>use : Symbol(use, Decl(capturedLetConstInLoop9_ES6.ts, 32, 1))
>z : Symbol(z, Decl(capturedLetConstInLoop9_ES6.ts, 49, 20))

    use(x1);
>use : Symbol(use, Decl(capturedLetConstInLoop9_ES6.ts, 32, 1))
>x1 : Symbol(x1, Decl(capturedLetConstInLoop9_ES6.ts, 68, 18))

    use(z1);
>use : Symbol(use, Decl(capturedLetConstInLoop9_ES6.ts, 32, 1))
>z1 : Symbol(z1, Decl(capturedLetConstInLoop9_ES6.ts, 68, 21))
}

function foo2() {
>foo2 : Symbol(foo2, Decl(capturedLetConstInLoop9_ES6.ts, 90, 1))

    for (let x of []) {
>x : Symbol(x, Decl(capturedLetConstInLoop9_ES6.ts, 93, 12))

        if (x === 1) {
>x : Symbol(x, Decl(capturedLetConstInLoop9_ES6.ts, 93, 12))

            break;
        }
        else if (x === 2) {
>x : Symbol(x, Decl(capturedLetConstInLoop9_ES6.ts, 93, 12))

            continue;
        }
        
        while (1 === 1) {
            if (x) {
>x : Symbol(x, Decl(capturedLetConstInLoop9_ES6.ts, 93, 12))

                break;
            }
            else {
                continue;
            }
        }
        
        switch(x) {
>x : Symbol(x, Decl(capturedLetConstInLoop9_ES6.ts, 93, 12))

            case 1: break;
            case 2: continue;
        }
        
        for (let y of []) {
>y : Symbol(y, Decl(capturedLetConstInLoop9_ES6.ts, 115, 16))

            switch(y) {
>y : Symbol(y, Decl(capturedLetConstInLoop9_ES6.ts, 115, 16))

                case 1: break;
                case 2: continue;
            }
        }
    }
}
